module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAppointment {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Appointment {
  id: ID!
  service: Service!
  user: User!
}

type AppointmentConnection {
  pageInfo: PageInfo!
  edges: [AppointmentEdge]!
  aggregate: AggregateAppointment!
}

input AppointmentCreateInput {
  id: ID
  service: ServiceCreateOneWithoutAppointmentsInput!
  user: UserCreateOneWithoutAppointmentsInput!
}

input AppointmentCreateManyWithoutServiceInput {
  create: [AppointmentCreateWithoutServiceInput!]
  connect: [AppointmentWhereUniqueInput!]
}

input AppointmentCreateManyWithoutUserInput {
  create: [AppointmentCreateWithoutUserInput!]
  connect: [AppointmentWhereUniqueInput!]
}

input AppointmentCreateWithoutServiceInput {
  id: ID
  user: UserCreateOneWithoutAppointmentsInput!
}

input AppointmentCreateWithoutUserInput {
  id: ID
  service: ServiceCreateOneWithoutAppointmentsInput!
}

type AppointmentEdge {
  node: Appointment!
  cursor: String!
}

enum AppointmentOrderByInput {
  id_ASC
  id_DESC
}

type AppointmentPreviousValues {
  id: ID!
}

input AppointmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [AppointmentScalarWhereInput!]
  OR: [AppointmentScalarWhereInput!]
  NOT: [AppointmentScalarWhereInput!]
}

type AppointmentSubscriptionPayload {
  mutation: MutationType!
  node: Appointment
  updatedFields: [String!]
  previousValues: AppointmentPreviousValues
}

input AppointmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AppointmentWhereInput
  AND: [AppointmentSubscriptionWhereInput!]
  OR: [AppointmentSubscriptionWhereInput!]
  NOT: [AppointmentSubscriptionWhereInput!]
}

input AppointmentUpdateInput {
  service: ServiceUpdateOneRequiredWithoutAppointmentsInput
  user: UserUpdateOneRequiredWithoutAppointmentsInput
}

input AppointmentUpdateManyWithoutServiceInput {
  create: [AppointmentCreateWithoutServiceInput!]
  delete: [AppointmentWhereUniqueInput!]
  connect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutServiceInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutServiceInput!]
  deleteMany: [AppointmentScalarWhereInput!]
}

input AppointmentUpdateManyWithoutUserInput {
  create: [AppointmentCreateWithoutUserInput!]
  delete: [AppointmentWhereUniqueInput!]
  connect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [AppointmentScalarWhereInput!]
}

input AppointmentUpdateWithoutServiceDataInput {
  user: UserUpdateOneRequiredWithoutAppointmentsInput
}

input AppointmentUpdateWithoutUserDataInput {
  service: ServiceUpdateOneRequiredWithoutAppointmentsInput
}

input AppointmentUpdateWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput!
  data: AppointmentUpdateWithoutServiceDataInput!
}

input AppointmentUpdateWithWhereUniqueWithoutUserInput {
  where: AppointmentWhereUniqueInput!
  data: AppointmentUpdateWithoutUserDataInput!
}

input AppointmentUpsertWithWhereUniqueWithoutServiceInput {
  where: AppointmentWhereUniqueInput!
  update: AppointmentUpdateWithoutServiceDataInput!
  create: AppointmentCreateWithoutServiceInput!
}

input AppointmentUpsertWithWhereUniqueWithoutUserInput {
  where: AppointmentWhereUniqueInput!
  update: AppointmentUpdateWithoutUserDataInput!
  create: AppointmentCreateWithoutUserInput!
}

input AppointmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  service: ServiceWhereInput
  user: UserWhereInput
  AND: [AppointmentWhereInput!]
  OR: [AppointmentWhereInput!]
  NOT: [AppointmentWhereInput!]
}

input AppointmentWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAppointment(data: AppointmentCreateInput!): Appointment!
  updateAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  upsertAppointment(where: AppointmentWhereUniqueInput!, create: AppointmentCreateInput!, update: AppointmentUpdateInput!): Appointment!
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteManyAppointments(where: AppointmentWhereInput): BatchPayload!
  createService(data: ServiceCreateInput!): Service!
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateManyServices(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): BatchPayload!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment]!
  appointmentsConnection(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppointmentConnection!
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Service {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  cost: String!
  postedBy: User
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment!]
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  id: ID
  name: String!
  cost: String!
  postedBy: UserCreateOneWithoutServicesInput
  appointments: AppointmentCreateManyWithoutServiceInput
}

input ServiceCreateManyWithoutPostedByInput {
  create: [ServiceCreateWithoutPostedByInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ServiceCreateOneWithoutAppointmentsInput {
  create: ServiceCreateWithoutAppointmentsInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateWithoutAppointmentsInput {
  id: ID
  name: String!
  cost: String!
  postedBy: UserCreateOneWithoutServicesInput
}

input ServiceCreateWithoutPostedByInput {
  id: ID
  name: String!
  cost: String!
  appointments: AppointmentCreateManyWithoutServiceInput
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  cost_ASC
  cost_DESC
}

type ServicePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  cost: String!
}

input ServiceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  cost: String
  cost_not: String
  cost_in: [String!]
  cost_not_in: [String!]
  cost_lt: String
  cost_lte: String
  cost_gt: String
  cost_gte: String
  cost_contains: String
  cost_not_contains: String
  cost_starts_with: String
  cost_not_starts_with: String
  cost_ends_with: String
  cost_not_ends_with: String
  AND: [ServiceScalarWhereInput!]
  OR: [ServiceScalarWhereInput!]
  NOT: [ServiceScalarWhereInput!]
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  NOT: [ServiceSubscriptionWhereInput!]
}

input ServiceUpdateInput {
  name: String
  cost: String
  postedBy: UserUpdateOneWithoutServicesInput
  appointments: AppointmentUpdateManyWithoutServiceInput
}

input ServiceUpdateManyDataInput {
  name: String
  cost: String
}

input ServiceUpdateManyMutationInput {
  name: String
  cost: String
}

input ServiceUpdateManyWithoutPostedByInput {
  create: [ServiceCreateWithoutPostedByInput!]
  delete: [ServiceWhereUniqueInput!]
  connect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  disconnect: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ServiceScalarWhereInput!]
  updateMany: [ServiceUpdateManyWithWhereNestedInput!]
}

input ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput!
  data: ServiceUpdateManyDataInput!
}

input ServiceUpdateOneRequiredWithoutAppointmentsInput {
  create: ServiceCreateWithoutAppointmentsInput
  update: ServiceUpdateWithoutAppointmentsDataInput
  upsert: ServiceUpsertWithoutAppointmentsInput
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateWithoutAppointmentsDataInput {
  name: String
  cost: String
  postedBy: UserUpdateOneWithoutServicesInput
}

input ServiceUpdateWithoutPostedByDataInput {
  name: String
  cost: String
  appointments: AppointmentUpdateManyWithoutServiceInput
}

input ServiceUpdateWithWhereUniqueWithoutPostedByInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutPostedByDataInput!
}

input ServiceUpsertWithoutAppointmentsInput {
  update: ServiceUpdateWithoutAppointmentsDataInput!
  create: ServiceCreateWithoutAppointmentsInput!
}

input ServiceUpsertWithWhereUniqueWithoutPostedByInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutPostedByDataInput!
  create: ServiceCreateWithoutPostedByInput!
}

input ServiceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  cost: String
  cost_not: String
  cost_in: [String!]
  cost_not_in: [String!]
  cost_lt: String
  cost_lte: String
  cost_gt: String
  cost_gte: String
  cost_contains: String
  cost_not_contains: String
  cost_starts_with: String
  cost_not_starts_with: String
  cost_ends_with: String
  cost_not_ends_with: String
  postedBy: UserWhereInput
  appointments_every: AppointmentWhereInput
  appointments_some: AppointmentWhereInput
  appointments_none: AppointmentWhereInput
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
}

input ServiceWhereUniqueInput {
  id: ID
}

type Subscription {
  appointment(where: AppointmentSubscriptionWhereInput): AppointmentSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service!]
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  services: ServiceCreateManyWithoutPostedByInput
  appointments: AppointmentCreateManyWithoutUserInput
}

input UserCreateOneWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutServicesInput {
  create: UserCreateWithoutServicesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAppointmentsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  services: ServiceCreateManyWithoutPostedByInput
}

input UserCreateWithoutServicesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  appointments: AppointmentCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  services: ServiceUpdateManyWithoutPostedByInput
  appointments: AppointmentUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput
  update: UserUpdateWithoutAppointmentsDataInput
  upsert: UserUpsertWithoutAppointmentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutServicesInput {
  create: UserCreateWithoutServicesInput
  update: UserUpdateWithoutServicesDataInput
  upsert: UserUpsertWithoutServicesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAppointmentsDataInput {
  name: String
  email: String
  password: String
  services: ServiceUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutServicesDataInput {
  name: String
  email: String
  password: String
  appointments: AppointmentUpdateManyWithoutUserInput
}

input UserUpsertWithoutAppointmentsInput {
  update: UserUpdateWithoutAppointmentsDataInput!
  create: UserCreateWithoutAppointmentsInput!
}

input UserUpsertWithoutServicesInput {
  update: UserUpdateWithoutServicesDataInput!
  create: UserCreateWithoutServicesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  services_every: ServiceWhereInput
  services_some: ServiceWhereInput
  services_none: ServiceWhereInput
  appointments_every: AppointmentWhereInput
  appointments_some: AppointmentWhereInput
  appointments_none: AppointmentWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    