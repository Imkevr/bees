scalar DateTime

type Query {
    info: String!
    servicefeed: [Service!]!
    service(id:ID!): Service!
    user: User!
    clientfeed:[Client!]! 
}

type Mutation {
    postService(name: String!, cost:Float!,description:String!,hours: Int!, minutes: Int! ): Service!
    deleteService(id: ID!): Service!
    updateService(id: ID!, name: String!,cost:Float!,description:String!,hours: Int!, minutes: Int!): Service!

    postClient(firstname:String!, lastname:String!):Client!

    signup(email: String!, password: String!,firstname:String!, lastname: String!): AuthPayload
    login(email: String!, password:String!): AuthPayload

    appointment(serviceId: ID!, start:String!, end:String!, date:String!, completed:Boolean): Appointment
}

type Service {
    id: ID!
    createdAt: DateTime! 
    updatedAt: DateTime! 
    name: String!
    cost: Float!
    description:String
    hours: Int!
    minutes: Int!
    postedBy: User!
}


type calendarSettings{
    id:ID!
    workStart: Int!
    workEnd: Int!
    forUser:User!
}


type AuthPayload{
    token: String
    user: User
}

type User {
    id: ID!
    firstname:String!
    lastname:String!
    email: String!
    services: [Service!]

}

type Appointment{
    id: ID!
    date: String!
    start: DateTime!
    end: DateTime!
    completed: Boolean
    service: Service!
    user: User!    
    client: Client!
}

type Client{
    id: ID!
    firstname:String!
    lastname:String!
    user: User!
}

type Subscription {
  newService: Service
  newAppointment: Appointment
  userFeed: User
}