type Query {
    info: String!
    servicefeed: [Service!]!
     # Fetch a single link by its `id`
    service(id:ID!): Service
    user(id:ID!):User
}

type Mutation {
    #service
    postService(name: String!, cost:Float!,description:String!,duration:Float! ): Service!
    updateService(id: ID!, cost: String, name: String): Service
    deleteService(id: ID!): Service
    #auth
    signup(email: String!, password: String!,firstname:String!, lastname: String!): AuthPayload
    login(email: String!, password:String!): AuthPayload
    appointment(serviceId: ID!, start:String!, end:String!, date:String!, completed:Boolean): Appointment
}

type Service {
    id: ID!
    createdAt: String! 
    updatedAt: String! 
    name: String!
    cost: Float!
    description:String
    duration:Float!
    postedBy: User
    appointments: [Appointment!]!

}

type AuthPayload{
    token: String
    user: User
}

type User {
    id: ID!
    firstname:String!
    lastname:String!
    email: String!
    services: [Service!]!

}

type Appointment{
    id: ID!
    date: String!
    start: String!
    end: String!
    completed: Boolean
    service: Service!
    user: User!    
}

type Client{
    id: ID!
    firstname:String!
    lastname:String!
    ClientForUser: User
}

type Subscription {
  newService: Service
  newAppointment: Appointment
}