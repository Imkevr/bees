// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  appointment: (where?: AppointmentWhereInput) => Promise<boolean>;
  client: (where?: ClientWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  calendarSettings: (where?: calendarSettingsWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  appointment: (
    where: AppointmentWhereUniqueInput
  ) => AppointmentNullablePromise;
  appointments: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Appointment>;
  appointmentsConnection: (args?: {
    where?: AppointmentWhereInput;
    orderBy?: AppointmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AppointmentConnectionPromise;
  client: (where: ClientWhereUniqueInput) => ClientNullablePromise;
  clients: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Client>;
  clientsConnection: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServiceNullablePromise;
  services: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Service>;
  servicesConnection: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  calendarSettings: (
    where: calendarSettingsWhereUniqueInput
  ) => calendarSettingsNullablePromise;
  calendarSettingses: (args?: {
    where?: calendarSettingsWhereInput;
    orderBy?: calendarSettingsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<calendarSettings>;
  calendarSettingsesConnection: (args?: {
    where?: calendarSettingsWhereInput;
    orderBy?: calendarSettingsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => calendarSettingsConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAppointment: (data: AppointmentCreateInput) => AppointmentPromise;
  updateAppointment: (args: {
    data: AppointmentUpdateInput;
    where: AppointmentWhereUniqueInput;
  }) => AppointmentPromise;
  updateManyAppointments: (args: {
    data: AppointmentUpdateManyMutationInput;
    where?: AppointmentWhereInput;
  }) => BatchPayloadPromise;
  upsertAppointment: (args: {
    where: AppointmentWhereUniqueInput;
    create: AppointmentCreateInput;
    update: AppointmentUpdateInput;
  }) => AppointmentPromise;
  deleteAppointment: (where: AppointmentWhereUniqueInput) => AppointmentPromise;
  deleteManyAppointments: (
    where?: AppointmentWhereInput
  ) => BatchPayloadPromise;
  createClient: (data: ClientCreateInput) => ClientPromise;
  updateClient: (args: {
    data: ClientUpdateInput;
    where: ClientWhereUniqueInput;
  }) => ClientPromise;
  updateManyClients: (args: {
    data: ClientUpdateManyMutationInput;
    where?: ClientWhereInput;
  }) => BatchPayloadPromise;
  upsertClient: (args: {
    where: ClientWhereUniqueInput;
    create: ClientCreateInput;
    update: ClientUpdateInput;
  }) => ClientPromise;
  deleteClient: (where: ClientWhereUniqueInput) => ClientPromise;
  deleteManyClients: (where?: ClientWhereInput) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (args: {
    data: ServiceUpdateInput;
    where: ServiceWhereUniqueInput;
  }) => ServicePromise;
  updateManyServices: (args: {
    data: ServiceUpdateManyMutationInput;
    where?: ServiceWhereInput;
  }) => BatchPayloadPromise;
  upsertService: (args: {
    where: ServiceWhereUniqueInput;
    create: ServiceCreateInput;
    update: ServiceUpdateInput;
  }) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createcalendarSettings: (
    data: calendarSettingsCreateInput
  ) => calendarSettingsPromise;
  updatecalendarSettings: (args: {
    data: calendarSettingsUpdateInput;
    where: calendarSettingsWhereUniqueInput;
  }) => calendarSettingsPromise;
  updateManycalendarSettingses: (args: {
    data: calendarSettingsUpdateManyMutationInput;
    where?: calendarSettingsWhereInput;
  }) => BatchPayloadPromise;
  upsertcalendarSettings: (args: {
    where: calendarSettingsWhereUniqueInput;
    create: calendarSettingsCreateInput;
    update: calendarSettingsUpdateInput;
  }) => calendarSettingsPromise;
  deletecalendarSettings: (
    where: calendarSettingsWhereUniqueInput
  ) => calendarSettingsPromise;
  deleteManycalendarSettingses: (
    where?: calendarSettingsWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  appointment: (
    where?: AppointmentSubscriptionWhereInput
  ) => AppointmentSubscriptionPayloadSubscription;
  client: (
    where?: ClientSubscriptionWhereInput
  ) => ClientSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  calendarSettings: (
    where?: calendarSettingsSubscriptionWhereInput
  ) => calendarSettingsSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "cost_ASC"
  | "cost_DESC"
  | "description_ASC"
  | "description_DESC"
  | "hours_ASC"
  | "hours_DESC"
  | "minutes_ASC"
  | "minutes_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type AppointmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type ClientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "deleted_ASC"
  | "deleted_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type calendarSettingsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "workStart_ASC"
  | "workStart_DESC"
  | "workEnd_ASC"
  | "workEnd_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AppointmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ServiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  cost?: Maybe<Float>;
  cost_not?: Maybe<Float>;
  cost_in?: Maybe<Float[] | Float>;
  cost_not_in?: Maybe<Float[] | Float>;
  cost_lt?: Maybe<Float>;
  cost_lte?: Maybe<Float>;
  cost_gt?: Maybe<Float>;
  cost_gte?: Maybe<Float>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  hours?: Maybe<Int>;
  hours_not?: Maybe<Int>;
  hours_in?: Maybe<Int[] | Int>;
  hours_not_in?: Maybe<Int[] | Int>;
  hours_lt?: Maybe<Int>;
  hours_lte?: Maybe<Int>;
  hours_gt?: Maybe<Int>;
  hours_gte?: Maybe<Int>;
  minutes?: Maybe<Int>;
  minutes_not?: Maybe<Int>;
  minutes_in?: Maybe<Int[] | Int>;
  minutes_not_in?: Maybe<Int[] | Int>;
  minutes_lt?: Maybe<Int>;
  minutes_lte?: Maybe<Int>;
  minutes_gt?: Maybe<Int>;
  minutes_gte?: Maybe<Int>;
  postedBy?: Maybe<UserWhereInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  OR?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  NOT?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  services_every?: Maybe<ServiceWhereInput>;
  services_some?: Maybe<ServiceWhereInput>;
  services_none?: Maybe<ServiceWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface AppointmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  service?: Maybe<ServiceWhereInput>;
  user?: Maybe<UserWhereInput>;
  client?: Maybe<ClientWhereInput>;
  AND?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
  OR?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
  NOT?: Maybe<AppointmentWhereInput[] | AppointmentWhereInput>;
}

export interface ClientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  OR?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  NOT?: Maybe<ClientWhereInput[] | ClientWhereInput>;
}

export type ClientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type calendarSettingsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface calendarSettingsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  workStart?: Maybe<Int>;
  workStart_not?: Maybe<Int>;
  workStart_in?: Maybe<Int[] | Int>;
  workStart_not_in?: Maybe<Int[] | Int>;
  workStart_lt?: Maybe<Int>;
  workStart_lte?: Maybe<Int>;
  workStart_gt?: Maybe<Int>;
  workStart_gte?: Maybe<Int>;
  workEnd?: Maybe<Int>;
  workEnd_not?: Maybe<Int>;
  workEnd_in?: Maybe<Int[] | Int>;
  workEnd_not_in?: Maybe<Int[] | Int>;
  workEnd_lt?: Maybe<Int>;
  workEnd_lte?: Maybe<Int>;
  workEnd_gt?: Maybe<Int>;
  workEnd_gte?: Maybe<Int>;
  forUser?: Maybe<UserWhereInput>;
  AND?: Maybe<calendarSettingsWhereInput[] | calendarSettingsWhereInput>;
  OR?: Maybe<calendarSettingsWhereInput[] | calendarSettingsWhereInput>;
  NOT?: Maybe<calendarSettingsWhereInput[] | calendarSettingsWhereInput>;
}

export interface AppointmentCreateInput {
  id?: Maybe<ID_Input>;
  start: DateTimeInput;
  end: DateTimeInput;
  deleted?: Maybe<Boolean>;
  service: ServiceCreateOneInput;
  user: UserCreateOneInput;
  client: ClientCreateOneInput;
}

export interface ServiceCreateOneInput {
  create?: Maybe<ServiceCreateInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  cost: Float;
  description: String;
  hours: Int;
  minutes: Int;
  postedBy?: Maybe<UserCreateOneWithoutServicesInput>;
  deleted?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutServicesInput {
  create?: Maybe<UserCreateWithoutServicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutServicesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  services?: Maybe<ServiceCreateManyWithoutPostedByInput>;
}

export interface ServiceCreateManyWithoutPostedByInput {
  create?: Maybe<
    ServiceCreateWithoutPostedByInput[] | ServiceCreateWithoutPostedByInput
  >;
  connect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
}

export interface ServiceCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  cost: Float;
  description: String;
  hours: Int;
  minutes: Int;
  deleted?: Maybe<Boolean>;
}

export interface ClientCreateOneInput {
  create?: Maybe<ClientCreateInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ClientCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  user: UserCreateOneInput;
  deleted?: Maybe<Boolean>;
}

export interface AppointmentUpdateInput {
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
  service?: Maybe<ServiceUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  client?: Maybe<ClientUpdateOneRequiredInput>;
}

export interface ServiceUpdateOneRequiredInput {
  create?: Maybe<ServiceCreateInput>;
  update?: Maybe<ServiceUpdateDataInput>;
  upsert?: Maybe<ServiceUpsertNestedInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceUpdateDataInput {
  name?: Maybe<String>;
  cost?: Maybe<Float>;
  description?: Maybe<String>;
  hours?: Maybe<Int>;
  minutes?: Maybe<Int>;
  postedBy?: Maybe<UserUpdateOneWithoutServicesInput>;
  deleted?: Maybe<Boolean>;
}

export interface UserUpdateOneWithoutServicesInput {
  create?: Maybe<UserCreateWithoutServicesInput>;
  update?: Maybe<UserUpdateWithoutServicesDataInput>;
  upsert?: Maybe<UserUpsertWithoutServicesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutServicesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertWithoutServicesInput {
  update: UserUpdateWithoutServicesDataInput;
  create: UserCreateWithoutServicesInput;
}

export interface ServiceUpsertNestedInput {
  update: ServiceUpdateDataInput;
  create: ServiceCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  services?: Maybe<ServiceUpdateManyWithoutPostedByInput>;
}

export interface ServiceUpdateManyWithoutPostedByInput {
  create?: Maybe<
    ServiceCreateWithoutPostedByInput[] | ServiceCreateWithoutPostedByInput
  >;
  delete?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  connect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  set?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  disconnect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  update?: Maybe<
    | ServiceUpdateWithWhereUniqueWithoutPostedByInput[]
    | ServiceUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | ServiceUpsertWithWhereUniqueWithoutPostedByInput[]
    | ServiceUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  updateMany?: Maybe<
    | ServiceUpdateManyWithWhereNestedInput[]
    | ServiceUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceUpdateWithWhereUniqueWithoutPostedByInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutPostedByDataInput;
}

export interface ServiceUpdateWithoutPostedByDataInput {
  name?: Maybe<String>;
  cost?: Maybe<Float>;
  description?: Maybe<String>;
  hours?: Maybe<Int>;
  minutes?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
}

export interface ServiceUpsertWithWhereUniqueWithoutPostedByInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateWithoutPostedByDataInput;
  create: ServiceCreateWithoutPostedByInput;
}

export interface ServiceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  cost?: Maybe<Float>;
  cost_not?: Maybe<Float>;
  cost_in?: Maybe<Float[] | Float>;
  cost_not_in?: Maybe<Float[] | Float>;
  cost_lt?: Maybe<Float>;
  cost_lte?: Maybe<Float>;
  cost_gt?: Maybe<Float>;
  cost_gte?: Maybe<Float>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  hours?: Maybe<Int>;
  hours_not?: Maybe<Int>;
  hours_in?: Maybe<Int[] | Int>;
  hours_not_in?: Maybe<Int[] | Int>;
  hours_lt?: Maybe<Int>;
  hours_lte?: Maybe<Int>;
  hours_gt?: Maybe<Int>;
  hours_gte?: Maybe<Int>;
  minutes?: Maybe<Int>;
  minutes_not?: Maybe<Int>;
  minutes_in?: Maybe<Int[] | Int>;
  minutes_not_in?: Maybe<Int[] | Int>;
  minutes_lt?: Maybe<Int>;
  minutes_lte?: Maybe<Int>;
  minutes_gt?: Maybe<Int>;
  minutes_gte?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
  deleted_not?: Maybe<Boolean>;
  AND?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  OR?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  NOT?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
}

export interface ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput;
  data: ServiceUpdateManyDataInput;
}

export interface ServiceUpdateManyDataInput {
  name?: Maybe<String>;
  cost?: Maybe<Float>;
  description?: Maybe<String>;
  hours?: Maybe<Int>;
  minutes?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ClientUpdateOneRequiredInput {
  create?: Maybe<ClientCreateInput>;
  update?: Maybe<ClientUpdateDataInput>;
  upsert?: Maybe<ClientUpsertNestedInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ClientUpdateDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  deleted?: Maybe<Boolean>;
}

export interface ClientUpsertNestedInput {
  update: ClientUpdateDataInput;
  create: ClientCreateInput;
}

export interface AppointmentUpdateManyMutationInput {
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  deleted?: Maybe<Boolean>;
}

export interface ClientUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  deleted?: Maybe<Boolean>;
}

export interface ClientUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  deleted?: Maybe<Boolean>;
}

export interface ServiceUpdateInput {
  name?: Maybe<String>;
  cost?: Maybe<Float>;
  description?: Maybe<String>;
  hours?: Maybe<Int>;
  minutes?: Maybe<Int>;
  postedBy?: Maybe<UserUpdateOneWithoutServicesInput>;
  deleted?: Maybe<Boolean>;
}

export interface ServiceUpdateManyMutationInput {
  name?: Maybe<String>;
  cost?: Maybe<Float>;
  description?: Maybe<String>;
  hours?: Maybe<Int>;
  minutes?: Maybe<Int>;
  deleted?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  services?: Maybe<ServiceUpdateManyWithoutPostedByInput>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface calendarSettingsCreateInput {
  id?: Maybe<ID_Input>;
  workStart: Int;
  workEnd: Int;
  forUser: UserCreateOneInput;
}

export interface calendarSettingsUpdateInput {
  workStart?: Maybe<Int>;
  workEnd?: Maybe<Int>;
  forUser?: Maybe<UserUpdateOneRequiredInput>;
}

export interface calendarSettingsUpdateManyMutationInput {
  workStart?: Maybe<Int>;
  workEnd?: Maybe<Int>;
}

export interface AppointmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AppointmentWhereInput>;
  AND?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AppointmentSubscriptionWhereInput[] | AppointmentSubscriptionWhereInput
  >;
}

export interface ClientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientWhereInput>;
  AND?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  OR?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  NOT?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceWhereInput>;
  AND?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  OR?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  NOT?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface calendarSettingsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<calendarSettingsWhereInput>;
  AND?: Maybe<
    | calendarSettingsSubscriptionWhereInput[]
    | calendarSettingsSubscriptionWhereInput
  >;
  OR?: Maybe<
    | calendarSettingsSubscriptionWhereInput[]
    | calendarSettingsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | calendarSettingsSubscriptionWhereInput[]
    | calendarSettingsSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Appointment {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
  deleted?: Boolean;
}

export interface AppointmentPromise extends Promise<Appointment>, Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
  service: <T = ServicePromise>() => T;
  user: <T = UserPromise>() => T;
  client: <T = ClientPromise>() => T;
}

export interface AppointmentSubscription
  extends Promise<AsyncIterator<Appointment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  service: <T = ServiceSubscription>() => T;
  user: <T = UserSubscription>() => T;
  client: <T = ClientSubscription>() => T;
}

export interface AppointmentNullablePromise
  extends Promise<Appointment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
  service: <T = ServicePromise>() => T;
  user: <T = UserPromise>() => T;
  client: <T = ClientPromise>() => T;
}

export interface Service {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  cost: Float;
  description: String;
  hours: Int;
  minutes: Int;
  deleted?: Boolean;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  cost: () => Promise<Float>;
  description: () => Promise<String>;
  hours: () => Promise<Int>;
  minutes: () => Promise<Int>;
  postedBy: <T = UserPromise>() => T;
  deleted: () => Promise<Boolean>;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  hours: () => Promise<AsyncIterator<Int>>;
  minutes: () => Promise<AsyncIterator<Int>>;
  postedBy: <T = UserSubscription>() => T;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ServiceNullablePromise
  extends Promise<Service | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  cost: () => Promise<Float>;
  description: () => Promise<String>;
  hours: () => Promise<Int>;
  minutes: () => Promise<Int>;
  postedBy: <T = UserPromise>() => T;
  deleted: () => Promise<Boolean>;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Client {
  id: ID_Output;
  firstname: String;
  lastname: String;
  deleted?: Boolean;
}

export interface ClientPromise extends Promise<Client>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  user: <T = UserPromise>() => T;
  deleted: () => Promise<Boolean>;
}

export interface ClientSubscription
  extends Promise<AsyncIterator<Client>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ClientNullablePromise
  extends Promise<Client | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  user: <T = UserPromise>() => T;
  deleted: () => Promise<Boolean>;
}

export interface AppointmentConnection {
  pageInfo: PageInfo;
  edges: AppointmentEdge[];
}

export interface AppointmentConnectionPromise
  extends Promise<AppointmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppointmentEdge>>() => T;
  aggregate: <T = AggregateAppointmentPromise>() => T;
}

export interface AppointmentConnectionSubscription
  extends Promise<AsyncIterator<AppointmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppointmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppointmentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AppointmentEdge {
  node: Appointment;
  cursor: String;
}

export interface AppointmentEdgePromise
  extends Promise<AppointmentEdge>,
    Fragmentable {
  node: <T = AppointmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppointmentEdgeSubscription
  extends Promise<AsyncIterator<AppointmentEdge>>,
    Fragmentable {
  node: <T = AppointmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAppointment {
  count: Int;
}

export interface AggregateAppointmentPromise
  extends Promise<AggregateAppointment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppointmentSubscription
  extends Promise<AsyncIterator<AggregateAppointment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClientConnection {
  pageInfo: PageInfo;
  edges: ClientEdge[];
}

export interface ClientConnectionPromise
  extends Promise<ClientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientEdge>>() => T;
  aggregate: <T = AggregateClientPromise>() => T;
}

export interface ClientConnectionSubscription
  extends Promise<AsyncIterator<ClientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientSubscription>() => T;
}

export interface ClientEdge {
  node: Client;
  cursor: String;
}

export interface ClientEdgePromise extends Promise<ClientEdge>, Fragmentable {
  node: <T = ClientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientEdgeSubscription
  extends Promise<AsyncIterator<ClientEdge>>,
    Fragmentable {
  node: <T = ClientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClient {
  count: Int;
}

export interface AggregateClientPromise
  extends Promise<AggregateClient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientSubscription
  extends Promise<AsyncIterator<AggregateClient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceConnection {
  pageInfo: PageInfo;
  edges: ServiceEdge[];
}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface ServiceEdge {
  node: Service;
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface calendarSettings {
  id: ID_Output;
  workStart: Int;
  workEnd: Int;
}

export interface calendarSettingsPromise
  extends Promise<calendarSettings>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workStart: () => Promise<Int>;
  workEnd: () => Promise<Int>;
  forUser: <T = UserPromise>() => T;
}

export interface calendarSettingsSubscription
  extends Promise<AsyncIterator<calendarSettings>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  workStart: () => Promise<AsyncIterator<Int>>;
  workEnd: () => Promise<AsyncIterator<Int>>;
  forUser: <T = UserSubscription>() => T;
}

export interface calendarSettingsNullablePromise
  extends Promise<calendarSettings | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workStart: () => Promise<Int>;
  workEnd: () => Promise<Int>;
  forUser: <T = UserPromise>() => T;
}

export interface calendarSettingsConnection {
  pageInfo: PageInfo;
  edges: calendarSettingsEdge[];
}

export interface calendarSettingsConnectionPromise
  extends Promise<calendarSettingsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<calendarSettingsEdge>>() => T;
  aggregate: <T = AggregatecalendarSettingsPromise>() => T;
}

export interface calendarSettingsConnectionSubscription
  extends Promise<AsyncIterator<calendarSettingsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<calendarSettingsEdgeSubscription>>>() => T;
  aggregate: <T = AggregatecalendarSettingsSubscription>() => T;
}

export interface calendarSettingsEdge {
  node: calendarSettings;
  cursor: String;
}

export interface calendarSettingsEdgePromise
  extends Promise<calendarSettingsEdge>,
    Fragmentable {
  node: <T = calendarSettingsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface calendarSettingsEdgeSubscription
  extends Promise<AsyncIterator<calendarSettingsEdge>>,
    Fragmentable {
  node: <T = calendarSettingsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatecalendarSettings {
  count: Int;
}

export interface AggregatecalendarSettingsPromise
  extends Promise<AggregatecalendarSettings>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatecalendarSettingsSubscription
  extends Promise<AsyncIterator<AggregatecalendarSettings>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AppointmentSubscriptionPayload {
  mutation: MutationType;
  node: Appointment;
  updatedFields: String[];
  previousValues: AppointmentPreviousValues;
}

export interface AppointmentSubscriptionPayloadPromise
  extends Promise<AppointmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppointmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppointmentPreviousValuesPromise>() => T;
}

export interface AppointmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppointmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppointmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppointmentPreviousValuesSubscription>() => T;
}

export interface AppointmentPreviousValues {
  id: ID_Output;
  start: DateTimeOutput;
  end: DateTimeOutput;
  deleted?: Boolean;
}

export interface AppointmentPreviousValuesPromise
  extends Promise<AppointmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  deleted: () => Promise<Boolean>;
}

export interface AppointmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AppointmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ClientSubscriptionPayload {
  mutation: MutationType;
  node: Client;
  updatedFields: String[];
  previousValues: ClientPreviousValues;
}

export interface ClientSubscriptionPayloadPromise
  extends Promise<ClientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientPreviousValuesPromise>() => T;
}

export interface ClientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientPreviousValuesSubscription>() => T;
}

export interface ClientPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  deleted?: Boolean;
}

export interface ClientPreviousValuesPromise
  extends Promise<ClientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  deleted: () => Promise<Boolean>;
}

export interface ClientPreviousValuesSubscription
  extends Promise<AsyncIterator<ClientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  node: Service;
  updatedFields: String[];
  previousValues: ServicePreviousValues;
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface ServicePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  cost: Float;
  description: String;
  hours: Int;
  minutes: Int;
  deleted?: Boolean;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  cost: () => Promise<Float>;
  description: () => Promise<String>;
  hours: () => Promise<Int>;
  minutes: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  cost: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  hours: () => Promise<AsyncIterator<Int>>;
  minutes: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface calendarSettingsSubscriptionPayload {
  mutation: MutationType;
  node: calendarSettings;
  updatedFields: String[];
  previousValues: calendarSettingsPreviousValues;
}

export interface calendarSettingsSubscriptionPayloadPromise
  extends Promise<calendarSettingsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = calendarSettingsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = calendarSettingsPreviousValuesPromise>() => T;
}

export interface calendarSettingsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<calendarSettingsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = calendarSettingsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = calendarSettingsPreviousValuesSubscription>() => T;
}

export interface calendarSettingsPreviousValues {
  id: ID_Output;
  workStart: Int;
  workEnd: Int;
}

export interface calendarSettingsPreviousValuesPromise
  extends Promise<calendarSettingsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  workStart: () => Promise<Int>;
  workEnd: () => Promise<Int>;
}

export interface calendarSettingsPreviousValuesSubscription
  extends Promise<AsyncIterator<calendarSettingsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  workStart: () => Promise<AsyncIterator<Int>>;
  workEnd: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Service",
    embedded: false
  },
  {
    name: "calendarSettings",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Client",
    embedded: false
  },
  {
    name: "Appointment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
